<?xml version="1.0" encoding="utf-8"?>
<ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<Manifest>
		<Identity>
			<ID>Demo.Cookdown</ID>
			<Version>1.0.0.4</Version>
		</Identity>
		<Name>Demo Cookdown</Name>
		<References>
			<Reference Alias="SCInternal">
				<ID>Microsoft.SystemCenter.Internal</ID>
				<Version>7.0.8437.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="SC">
				<ID>Microsoft.SystemCenter.Library</ID>
				<Version>7.0.8437.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="Windows">
				<ID>Microsoft.Windows.Library</ID>
				<Version>7.5.8501.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="Health">
				<ID>System.Health.Library</ID>
				<Version>7.0.8437.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="System">
				<ID>System.Library</ID>
				<Version>7.5.8501.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="Performance">
				<ID>System.Performance.Library</ID>
				<Version>7.0.8437.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
			<Reference Alias="SCDW">
				<ID>Microsoft.SystemCenter.DataWarehouse.Library</ID>
				<Version>7.2.11719.0</Version>
				<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
			</Reference>
		</References>
	</Manifest>
	<TypeDefinitions>
		<EntityTypes>
			<ClassTypes>
				<ClassType ID="Demo.Cookdown.App.Class" Accessibility="Public" Abstract="false" Base="Windows!Microsoft.Windows.LocalApplication" Hosted="true" Singleton="false" Extension="false" />
			</ClassTypes>
		</EntityTypes>
		<ModuleTypes>
			<DataSourceModuleType ID="Demo.Cookdown.App.FileCountInFolderThreshold.DS" Accessibility="Internal" Batching="false">
				<Configuration>
					<xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
					<xsd:element minOccurs="0" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
					<xsd:element minOccurs="1" name="FileExtensionFilter" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
					<xsd:element minOccurs="1" name="FileCountThreshold" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
					<xsd:element minOccurs="1" name="FolderPath" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
					<xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
				</Configuration>
				<OverrideableParameters>
					<OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
					<OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
					<OverrideableParameter ID="FileExtensionFilter" Selector="$Config/FileExtensionFilter$" ParameterType="string" />
					<OverrideableParameter ID="FileCountThreshold" Selector="$Config/FileCountThreshold$" ParameterType="int" />
					<OverrideableParameter ID="FolderPath" Selector="$Config/FolderPath$" ParameterType="string" />
					<OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
				</OverrideableParameters>
				<ModuleImplementation Isolation="Any">
					<Composite>
						<MemberModules>
							<DataSource ID="Scheduler" TypeID="System!System.Scheduler">
								<Scheduler>
									<SimpleReccuringSchedule>
										<Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
										<SyncTime>$Config/SyncTime$</SyncTime>
									</SimpleReccuringSchedule>
									<ExcludeDates />
								</Scheduler>
							</DataSource>
							<ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
								<ScriptName>Demo.Cookdown.App.FileCountInFolderThreshold.DS.ps1</ScriptName>
								<ScriptBody>
#=================================================================================
#  File count monitoring script
#  This script takes a file count threshold, file extension filter, and path
#
#  Author: Kevin Holman
#  v1.0
#=================================================================================
param([string]$FileExtensionFilter,[int]$FileCountThreshold,[string]$FolderPath)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
#[string]$FileExtensionFilter = "*.message,*.n?ack,*.txt"
#[int]$FileCountThreshold = 2
#[string]$FolderPath = "c:\windows\temp"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
$ScriptName = "Demo.Cookdown.App.FileCountInFolderThreshold.DS.ps1"
$EventID = "8676"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
# Load PropertyBag function 
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nScript is starting. `nFolderPath: ($FolderPath) `nFileExtensionFilter: ($FileExtensionFilter) `nFileCountThreshold: ($FileCountThreshold) `nRunning as ($whoami).")

# Test to see if the folder exists and exit with error if not
IF (!(Test-Path $FolderPath))
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"FATAL ERROR:  The expected folder ($FolderPath) was not found.")
  $bag.AddValue('ScriptResult','Failed')
  $bag.AddValue('FileCount',0)
  $bag.AddValue('Message','The FolderPath was not available.')
  $bag.AddValue('FolderPath',$FolderPath)
  $bag.AddValue('FileExtensionFilter',$FileExtensionFilter)
  $bag.AddValue('FileCountThreshold',$FileCountThreshold)
  # Return all bags
  $bag
  EXIT
}

# Clear any previous errors
$Error.Clear()
#Build array from filter string
$FileExtensionFilterArr = $FileExtensionFilter.Split(",")

# Create Empty array
$FolderItems = @()
#Create empty filter string:
[string]$FileExtensionFilterString = ""

# Loop through each filter extension and get the files then combine them into one big array
# We use this because using Get-ChildItem -Include can throw errors if items change rapdily 
FOREACH ($FileExtensionFilterString in $FileExtensionFilterArr)
{
  $FoldItemsTempArr = Get-ChildItem $FolderPath -Filter $FileExtensionFilterString
  $FolderItems += $FoldItemsTempArr
}

#Exit the script if we throw an error from Get-ChildItem
IF ($Error) 
{ 
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR: Error while getting folderitems in path: ($FolderPath). `n Terminating script. `n Error is: ($Error).")
  $bag.AddValue('ScriptResult','Failed')
  $bag.AddValue('FileCount',0)
  $bag.AddValue('Message',"Running Get-ChildItem for the FolderPath threw an Error. $Error")
  $bag.AddValue('FolderPath',$FolderPath)
  $bag.AddValue('FileExtensionFilter',$FileExtensionFilter)
  $bag.AddValue('FileCountThreshold',$FileCountThreshold)
  # Return all bags
  $bag
  EXIT
}

[int]$FolderItemsCount = $FolderItems.Count

$Message = "`nFileCountFound: ($FolderItemsCount)."
$momapi.LogScriptEvent($ScriptName,$EventID,0,$Message)
$bag.AddValue('ScriptResult','Completed')
$bag.AddValue('FileCount',$FolderItemsCount)
$bag.AddValue('Message',$Message)
$bag.AddValue('FolderPath',$FolderPath)
$bag.AddValue('FileExtensionFilter',$FileExtensionFilter)
$bag.AddValue('FileCountThreshold',$FileCountThreshold)

# Return all bags
$bag


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script								
                                </ScriptBody>
								<Parameters>
									<Parameter>
										<Name>FileExtensionFilter</Name>
										<Value>$Config/FileExtensionFilter$</Value>
									</Parameter>
									<Parameter>
										<Name>FileCountThreshold</Name>
										<Value>$Config/FileCountThreshold$</Value>
									</Parameter>
									<Parameter>
										<Name>FolderPath</Name>
										<Value>$Config/FolderPath$</Value>
									</Parameter>
								</Parameters>
								<TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
							</ProbeAction>
						</MemberModules>
						<Composition>
							<Node ID="PA">
								<Node ID="Scheduler" />
							</Node>
						</Composition>
					</Composite>
				</ModuleImplementation>
				<OutputType>System!System.PropertyBagData</OutputType>
			</DataSourceModuleType>
		</ModuleTypes>
		<MonitorTypes>
			<UnitMonitorType ID="Demo.Cookdown.App.FileCountInFolderThreshold.Monitor.MonitorType" Accessibility="Internal">
				<MonitorTypeStates>
					<MonitorTypeState ID="GoodCondition" NoDetection="false" />
					<MonitorTypeState ID="BadCondition" NoDetection="false" />
				</MonitorTypeStates>
				<Configuration>
					<xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
					<xsd:element minOccurs="0" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
					<xsd:element minOccurs="1" name="FileExtensionFilter" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
					<xsd:element minOccurs="1" name="FileCountThreshold" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
					<xsd:element minOccurs="1" name="FolderPath" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
					<xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
				</Configuration>
				<OverrideableParameters>
					<OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
					<OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
					<OverrideableParameter ID="FileExtensionFilter" Selector="$Config/FileExtensionFilter$" ParameterType="string" />
					<OverrideableParameter ID="FileCountThreshold" Selector="$Config/FileCountThreshold$" ParameterType="int" />
					<OverrideableParameter ID="FolderPath" Selector="$Config/FolderPath$" ParameterType="string" />
					<OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
				</OverrideableParameters>
				<MonitorImplementation>
					<MemberModules>
						<DataSource ID="DS" TypeID="Demo.Cookdown.App.FileCountInFolderThreshold.DS">
							<IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
							<SyncTime>$Config/SyncTime$</SyncTime>
							<FileExtensionFilter>$Config/FileExtensionFilter$</FileExtensionFilter>
							<FileCountThreshold>$Config/FileCountThreshold$</FileCountThreshold>
							<FolderPath>$Config/FolderPath$</FolderPath>
							<TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
						</DataSource>
						<ConditionDetection ID="GoodConditionFilter" TypeID="System!System.ExpressionFilter">
							<Expression>
								<And>
									<Expression>
										<SimpleExpression>
											<ValueExpression>
												<XPathQuery Type="Integer">Property[@Name='FileCount']</XPathQuery>
											</ValueExpression>
											<Operator>Less</Operator>
											<ValueExpression>
												<Value Type="Integer">$Config/FileCountThreshold$</Value>
											</ValueExpression>
										</SimpleExpression>
									</Expression>
									<Expression>
										<SimpleExpression>
											<ValueExpression>
												<XPathQuery Type="String">Property[@Name='ScriptResult']</XPathQuery>
											</ValueExpression>
											<Operator>Equal</Operator>
											<ValueExpression>
												<Value Type="String">Completed</Value>
											</ValueExpression>
										</SimpleExpression>
									</Expression>
								</And>
							</Expression>							
						</ConditionDetection>
						<ConditionDetection ID="BadConditionFilter" TypeID="System!System.ExpressionFilter">
							<Expression>
								<Or>
									<Expression>
										<SimpleExpression>
											<ValueExpression>
												<XPathQuery Type="Integer">Property[@Name='FileCount']</XPathQuery>
											</ValueExpression>
											<Operator>GreaterEqual</Operator>
											<ValueExpression>
												<Value Type="Integer">$Config/FileCountThreshold$</Value>
											</ValueExpression>
										</SimpleExpression>
									</Expression>
									<Expression>
										<SimpleExpression>
											<ValueExpression>
												<XPathQuery Type="String">Property[@Name='ScriptResult']</XPathQuery>
											</ValueExpression>
											<Operator>Equal</Operator>
											<ValueExpression>
												<Value Type="String">Failed</Value>
											</ValueExpression>
										</SimpleExpression>
									</Expression>
								</Or>
							</Expression>							
						</ConditionDetection>
					</MemberModules>
					<RegularDetections>
						<RegularDetection MonitorTypeStateID="GoodCondition">
							<Node ID="GoodConditionFilter">
								<Node ID="DS" />
							</Node>
						</RegularDetection>
						<RegularDetection MonitorTypeStateID="BadCondition">
							<Node ID="BadConditionFilter">
								<Node ID="DS" />
							</Node>
						</RegularDetection>
					</RegularDetections>
					<OnDemandDetections>
						<OnDemandDetection MonitorTypeStateID="GoodCondition">
							<Node ID="GoodConditionFilter">
								<Node ID="DS" />
							</Node>
						</OnDemandDetection>
						<OnDemandDetection MonitorTypeStateID="BadCondition">
							<Node ID="BadConditionFilter">
								<Node ID="DS" />
							</Node>
						</OnDemandDetection>
					</OnDemandDetections>
				</MonitorImplementation>
			</UnitMonitorType>
		</MonitorTypes>
	</TypeDefinitions>
	<Monitoring>
		<Discoveries>
			<Discovery ID="Demo.Cookdown.App.Class.Discovery" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal">
				<Category>Discovery</Category>
				<DiscoveryTypes>
					<DiscoveryClass TypeID="Demo.Cookdown.App.Class" />
				</DiscoveryTypes>
				<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.FilteredRegistryDiscoveryProvider">
					<ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
					<RegistryAttributeDefinitions>
						<RegistryAttributeDefinition>
							<AttributeName>AppRegKeyExists</AttributeName>
							<Path>SOFTWARE</Path>
							<PathType>0</PathType>
							<!-- 0=regKey 1=regValue -->
							<AttributeType>0</AttributeType>
							<!-- 0=CheckIfExists (Boolean) 1=treat data as (String) 2=treat data as (Integer) -->
						</RegistryAttributeDefinition>
					</RegistryAttributeDefinitions>
					<Frequency>86400</Frequency>
					<ClassId>$MPElement[Name="Demo.Cookdown.App.Class"]$</ClassId>
					<InstanceSettings>
						<Settings>
							<Setting>
								<Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name>
								<Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
							</Setting>
							<Setting>
								<Name>$MPElement[Name="System!System.Entity"]/DisplayName$</Name>
								<Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
							</Setting>
						</Settings>
					</InstanceSettings>
					<Expression>
						<SimpleExpression>
							<ValueExpression>
								<XPathQuery Type="Boolean">Values/AppRegKeyExists</XPathQuery>
								<!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
							</ValueExpression>
							<Operator>Equal</Operator>
							<!-- Common options for SimpleExpression Operator are "Equal" "NotEqual" "Greater" "Less" "GreaterEqual" "LessEqual" "Like" "NotLike" -->
							<ValueExpression>
								<Value Type="Boolean">true</Value>
								<!-- Common options for XPathQuery Type are "Boolean" "String" "Integer" "Double" -->
							</ValueExpression>
						</SimpleExpression>
					</Expression>
				</DataSource>
			</Discovery>
		</Discoveries>
		<Rules>
			<Rule ID="Demo.Cookdown.App.FileCountInFolder.PerfCollection.Rule" Enabled="true" Target="Demo.Cookdown.App.Class" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
				<Category>PerformanceCollection</Category>
				<DataSources>
					<DataSource ID="DS" TypeID="Demo.Cookdown.App.FileCountInFolderThreshold.DS">
						<IntervalSeconds>60</IntervalSeconds>
						<SyncTime />
						<FileExtensionFilter>*.*</FileExtensionFilter>
						<FileCountThreshold>100</FileCountThreshold>
						<FolderPath>C:\Windows\Temp</FolderPath>
						<TimeoutSeconds>120</TimeoutSeconds>
					</DataSource>
				</DataSources>
				<ConditionDetection ID="System.Performance.DataGenericMapper" TypeID="Performance!System.Performance.DataGenericMapper">
					<ObjectName>Files</ObjectName>
					<CounterName>FileCount</CounterName>
					<InstanceName>Temp</InstanceName>
					<Value>$Data/Property[@Name='FileCount']$</Value>
				</ConditionDetection>
				<WriteActions>
					<WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
					<WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
				</WriteActions>
			</Rule>
		</Rules>
		<Monitors>
			<UnitMonitor ID="Demo.Cookdown.App.FileCountInFolderThreshold.Monitor" Accessibility="Public" Enabled="true" Target="Demo.Cookdown.App.Class" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Demo.Cookdown.App.FileCountInFolderThreshold.Monitor.MonitorType" ConfirmDelivery="false">
				<Category>AvailabilityHealth</Category>
				<AlertSettings AlertMessage="Demo.Cookdown.App.FileCountInFolderThreshold.Monitor.AlertMessage">
					<AlertOnState>Warning</AlertOnState>
					<AutoResolve>true</AutoResolve>
					<AlertPriority>Normal</AlertPriority>
					<AlertSeverity>Error</AlertSeverity>
					<AlertParameters>
						<AlertParameter1>$Data/Context/Property[@Name='FileCount']$</AlertParameter1>
						<AlertParameter2>$Data/Context/Property[@Name='Message']$</AlertParameter2>
						<AlertParameter3>$Data/Context/Property[@Name='FolderPath']$</AlertParameter3>
						<AlertParameter4>$Data/Context/Property[@Name='FileExtensionFilter']$</AlertParameter4>
						<AlertParameter5>$Data/Context/Property[@Name='FileCountThreshold']$</AlertParameter5>
						<AlertParameter6>$Data/Context/Property[@Name='ScriptResult']$</AlertParameter6>						
					</AlertParameters>
				</AlertSettings>
				<OperationalStates>
					<OperationalState ID="GoodCondition" MonitorTypeStateID="GoodCondition" HealthState="Success" />
					<OperationalState ID="BadCondition" MonitorTypeStateID="BadCondition" HealthState="Warning" />
				</OperationalStates>
				<Configuration>
					<IntervalSeconds>60</IntervalSeconds>
					<SyncTime />
					<FileExtensionFilter>*.*</FileExtensionFilter>
					<FileCountThreshold>100</FileCountThreshold>
					<FolderPath>C:\Windows\Temp</FolderPath>
					<TimeoutSeconds>120</TimeoutSeconds>
				</Configuration>
			</UnitMonitor>
		</Monitors>
	</Monitoring>
	<Presentation>
		<Views>
			<View ID="Demo.Cookdown.Alert.View" Accessibility="Internal" Enabled="true" Target="Demo.Cookdown.App.Class" TypeID="SC!Microsoft.SystemCenter.AlertViewType" Visible="true">
				<Category>Custom</Category>
				<Criteria>
					<ResolutionState>
						<StateRange Operator="NotEquals">255</StateRange>
					</ResolutionState>
				</Criteria>
			</View>
			<View ID="Demo.Cookdown.Perf.View" Accessibility="Internal" Enabled="true" Target="Demo.Cookdown.App.Class" TypeID="SC!Microsoft.SystemCenter.PerformanceViewType" Visible="true">
				<Category>Custom</Category>
				<Criteria />
			</View>
			<View ID="Demo.Cookdown.State.View" Accessibility="Internal" Enabled="true" Target="Demo.Cookdown.App.Class" TypeID="SC!Microsoft.SystemCenter.StateViewType" Visible="true">
				<Category>Custom</Category>
				<Criteria />
			</View>
		</Views>
		<Folders>
			<Folder ID="Demo.Cookdown.Root.Folder" Accessibility="Internal" ParentFolder="SC!Microsoft.SystemCenter.Monitoring.ViewFolder.Root" />
		</Folders>
		<FolderItems>
			<FolderItem ElementID="Demo.Cookdown.Alert.View" ID="Demo.Cookdown.Alert.View.FolderItem" Folder="Demo.Cookdown.Root.Folder" />
			<FolderItem ElementID="Demo.Cookdown.Perf.View" ID="Demo.Cookdown.Perf.View.FolderItem" Folder="Demo.Cookdown.Root.Folder" />
			<FolderItem ElementID="Demo.Cookdown.State.View" ID="Demo.Cookdown.State.View.FolderItem" Folder="Demo.Cookdown.Root.Folder" />
		</FolderItems>
		<StringResources>
			<StringResource ID="Demo.Cookdown.App.FileCountInFolderThreshold.Monitor.AlertMessage" />
		</StringResources>
	</Presentation>
	<LanguagePacks>
		<LanguagePack ID="ENU" IsDefault="true">
			<DisplayStrings>
				<DisplayString ElementID="Demo.Cookdown">
					<Name>Demo Cookdown </Name>
					<Description></Description>
				</DisplayString>
				<DisplayString ElementID="Demo.Cookdown.Alert.View">
					<Name>Alerts</Name>
				</DisplayString>
				<DisplayString ElementID="Demo.Cookdown.App.Class">
					<Name>Demo Cookdown App Class</Name>
				</DisplayString>
				<DisplayString ElementID="Demo.Cookdown.App.Class.Discovery">
					<Name>Demo Cookdown App Class Discovery</Name>
				</DisplayString>
				<DisplayString ElementID="Demo.Cookdown.App.FileCountInFolder.PerfCollection.Rule">
					<Name>Demo Cookdown App FileCountInFolder Performance Collection Rule</Name>
				</DisplayString>
				<DisplayString ElementID="Demo.Cookdown.App.FileCountInFolderThreshold.Monitor">
					<Name>Demo Cookdown App File Count Threshold Monitor</Name>
				</DisplayString>
				<DisplayString ElementID="Demo.Cookdown.App.FileCountInFolderThreshold.Monitor.AlertMessage">
					<Name>File Count Threshold Monitor: Too many files in folder</Name>
					<Description>Demo Cookdown App File Count Monitor
FileCount: {0}
FolderPath: {2}
FileExtensionFilter: {3}
FileCountThreshold: {4}
Message: {1}
ScriptResult: {5}</Description>
				</DisplayString>
				<DisplayString ElementID="Demo.Cookdown.App.FileCountInFolderThreshold.Monitor" SubElementID="BadCondition">
					<Name>BadCondition</Name>
				</DisplayString>
				<DisplayString ElementID="Demo.Cookdown.App.FileCountInFolderThreshold.Monitor" SubElementID="GoodCondition">
					<Name>GoodCondition</Name>
				</DisplayString>
				<DisplayString ElementID="Demo.Cookdown.Perf.View">
					<Name>Performance</Name>
				</DisplayString>
				<DisplayString ElementID="Demo.Cookdown.Root.Folder">
					<Name>Demo Cookdown</Name>
				</DisplayString>
				<DisplayString ElementID="Demo.Cookdown.State.View">
					<Name>State</Name>
				</DisplayString>
			</DisplayStrings>
		</LanguagePack>
	</LanguagePacks>
</ManagementPack>